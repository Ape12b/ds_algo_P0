Time usage analytics performed using %%timeit Built-in magic commands in cell mode.
https://ipython.readthedocs.io/en/stable/interactive/magics.html

Task 0: This implementation has a worst case time complexity of O(1) i.e. constant time since getting a specific object from a list in python is a constant time operation.
5.94 ms ± 50.9 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)

Task 1: This implementation has a worst case time complexity of O(n) because it loops once through each row in calls and texts.
7.13 ms ± 78 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)

Task 2: This implementation has a worst case time complexity ofO(n) where n is proportional to the number of rows in calls list.
6.23 ms ± 44.2 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)


Task 3: Task A has a worst case time complexity of O(n log n) because of the sort operation that happens during printing.
Task B has a worst case time complexity O(n). It is proportional to the length of the calls list.
6.83 ms ± 79.5 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)

Task 4: This implementation has a worst case time complexity of O(n log n) because of the sort operation that happens during printing.
7.12 ms ± 89.3 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)